package org.hisp.dhis.rules.models

/**
 *
 * @param data dynamic data which can be potentially
 * generated by the RuleEngine.
 * @param content a static content which will
 * be shown to the user.
 * @param location location of where the result of this
 * action must be rendered: can be either 'feedback'
 * or 'program indicator' widget.
 */
data class RuleActionText(
    val type: Type,
    val data: String,
    val content: String,
    val location: String
) : RuleAction {
    enum class Type {
        DISPLAYTEXT,
        DISPLAYKEYVALUEPAIR
    }

    companion object {
        const val LOCATION_FEEDBACK_WIDGET = "feedback"
        const val LOCATION_INDICATOR_WIDGET = "indicators"
        fun createForFeedback(
            type: Type,
            content: String?, data: String?
        ): RuleActionText {
            require(!(content == null && data == null)) { "Both content and data must not be null" }
            return RuleActionText(type, data ?: "", content ?: "", LOCATION_FEEDBACK_WIDGET)
        }

        fun createForIndicators(
            type: Type,
            content: String?, data: String?
        ): RuleActionText {
            require(!(content == null && data == null)) { "Both content and data must not be null" }
            return RuleActionText(type, data ?: "", content ?: "", LOCATION_INDICATOR_WIDGET)
        }
    }

    override fun data(): String {
        return data
    }
}
